
name: Auto Generate Article with Images

on:
  schedule:
    # Run 3 times daily: 6 AM, 12 PM, 6 PM UTC
    - cron: '0 6 * * *'
    - cron: '0 12 * * *'
    - cron: '0 18 * * *'
  workflow_dispatch: # Manual trigger support
    inputs:
      force_generate:
        description: 'Force generate article (ignore daily limits)'
        required: false
        default: 'false'
        type: boolean
      test_mode:
        description: 'Test mode (generate without API calls for testing)'
        required: false
        default: 'false'
        type: boolean
      custom_topic:
        description: 'Custom topic for article generation'
        required: false
        default: ''
        type: string
      skip_images:
        description: 'Skip image download (text only)'
        required: false
        default: 'false'
        type: boolean
      debug_mode:
        description: 'Enable debug logging'
        required: false
        default: 'false'
        type: boolean

jobs:
  generate-article:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    permissions:
      contents: write
      actions: read
      pull-requests: write
      repository-projects: read

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
        persist-credentials: true

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Cache Python dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('_Article/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Python dependencies
      run: |
        cd _Article
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        echo "‚úÖ Python dependencies installed successfully"

    - name: Validate configuration files
      run: |
        cd _Article
        
        # Check required files exist
        if [ ! -f "UpdateArticle.py" ]; then
          echo "‚ùå UpdateArticle.py not found"
          exit 1
        fi
        
        if [ ! -f "keyword.txt" ]; then
          echo "‚ö†Ô∏è keyword.txt not found, creating default keywords"
          cat > keyword.txt << 'EOF'
        modern living room design
        contemporary kitchen ideas
        bedroom decoration tips
        bathroom renovation guide
        home office setup ideas
        minimalist interior design
        scandinavian home decor
        industrial style furniture
        small space solutions
        outdoor patio design
        EOF
        fi
        
        if [ ! -f "apikey.txt" ] && [ -z "${{ secrets.GEMINI_API_KEY }}" ]; then
          echo "‚ö†Ô∏è No API keys found in apikey.txt or secrets"
        fi
        
        echo "‚úÖ Configuration validation completed"

    - name: Check rate limits and daily usage
      id: check_limits
      run: |
        cd _Article
        echo "SHOULD_GENERATE=true" >> $GITHUB_OUTPUT
        
        # Check daily generation limits
        if [ -f "last_run.json" ]; then
          LAST_RUN=$(cat last_run.json | python3 -c "import sys, json; print(json.load(sys.stdin).get('date', ''))" 2>/dev/null || echo "")
          TODAY=$(date +%Y-%m-%d)
          
          if [ "$LAST_RUN" = "$TODAY" ] && [ "${{ github.event.inputs.force_generate }}" != "true" ]; then
            DAILY_COUNT=$(cat last_run.json | python3 -c "import sys, json; print(json.load(sys.stdin).get('daily_count', 0))" 2>/dev/null || echo "0")
            if [ "$DAILY_COUNT" -ge 3 ]; then
              echo "SHOULD_GENERATE=false" >> $GITHUB_OUTPUT
              echo "üìä Daily limit reached (3 articles). Use force_generate to override."
            fi
          fi
        fi
        
        # Check existing articles
        if [ -f "articles_data.json" ]; then
          ARTICLE_COUNT=$(cat articles_data.json | python3 -c "import sys, json; print(len(json.load(sys.stdin).get('articles', [])))" 2>/dev/null || echo "0")
          echo "üìà Total articles generated: $ARTICLE_COUNT"
        else
          echo "üÜï First time generation. Creating new articles database."
        fi

    - name: Setup environment variables
      run: |
        cd _Article
        
        # Create environment configuration
        cat > .env << EOF
        # Generated by GitHub Actions
        TEST_MODE=${{ github.event.inputs.test_mode }}
        CUSTOM_TOPIC=${{ github.event.inputs.custom_topic }}
        FORCE_GENERATE=${{ github.event.inputs.force_generate }}
        SKIP_IMAGES=${{ github.event.inputs.skip_images }}
        DEBUG_MODE=${{ github.event.inputs.debug_mode }}
        GITHUB_WORKFLOW=true
        EOF
        
        echo "‚úÖ Environment variables configured"

    - name: Generate professional article with images
      if: steps.check_limits.outputs.SHOULD_GENERATE == 'true'
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        GEMINI_API_KEYS: ${{ secrets.GEMINI_API_KEYS }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        UNSPLASH_ACCESS_KEY: ${{ secrets.UNSPLASH_ACCESS_KEY }}
        PIXABAY_API_KEY: ${{ secrets.PIXABAY_API_KEY }}
        PEXELS_API_KEY: ${{ secrets.PEXELS_API_KEY }}
        PIXEL_API_KEYS: ${{ secrets.PIXEL_API_KEYS }}
        TEST_MODE: ${{ github.event.inputs.test_mode }}
        CUSTOM_TOPIC: ${{ github.event.inputs.custom_topic }}
        FORCE_GENERATE: ${{ github.event.inputs.force_generate }}
        SKIP_IMAGES: ${{ github.event.inputs.skip_images }}
        DEBUG_MODE: ${{ github.event.inputs.debug_mode }}
      run: |
        cd _Article
        echo "üöÄ Starting professional article generation..."
        
        # Set execution mode
        if [ "${{ github.event.inputs.test_mode }}" = "true" ]; then
          echo "üß™ Running in TEST MODE - Limited API calls"
        fi
        
        if [ -n "${{ github.event.inputs.custom_topic }}" ]; then
          echo "üìù Using custom topic: ${{ github.event.inputs.custom_topic }}"
        fi
        
        if [ "${{ github.event.inputs.skip_images }}" = "true" ]; then
          echo "üñºÔ∏è Skipping image download"
        fi
        
        if [ "${{ github.event.inputs.debug_mode }}" = "true" ]; then
          echo "üêõ Debug mode enabled"
          export PYTHONPATH="$PYTHONPATH:."
          python -c "import sys; print('Python version:', sys.version)"
          python -c "import UpdateArticle; print('UpdateArticle module loaded successfully')"
        fi
        
        # Run the article generator
        python UpdateArticle.py
        
        # Check generation results
        if [ $? -eq 0 ]; then
          echo "‚úÖ Article generation completed successfully!"
          
          # Display generation summary
          if [ -f "articles_data.json" ]; then
            echo "üìä Generation Summary:"
            python3 -c "
import json
try:
    with open('articles_data.json', 'r', encoding='utf-8') as f:
        data = json.load(f)
        articles = data.get('articles', [])
        if articles:
            latest = articles[-1]
            print(f'üì∞ Title: {latest.get(\"title\", \"N/A\")}')
            print(f'üìù Word Count: {latest.get(\"word_count\", \"N/A\")}')
            print(f'üñºÔ∏è Images: {len(latest.get(\"images\", []))}')
            print(f'üîó Related Articles: {len(latest.get(\"related_articles\", []))}')
            print(f'‚è∞ Generated: {latest.get(\"created_at\", \"N/A\")}')
        else:
            print('No articles found in database')
except Exception as e:
    print(f'Error reading articles data: {e}')
"
          fi
          
          # Check if Jekyll posts were created
          if ls ../_posts/*.md 1> /dev/null 2>&1; then
            LATEST_POST=$(ls -t ../_posts/*.md | head -n1)
            echo "üìÑ Latest post created: $(basename "$LATEST_POST")"
            
            # Validate post format
            if head -n5 "$LATEST_POST" | grep -q "^---$"; then
              echo "‚úÖ Jekyll frontmatter validated"
            else
              echo "‚ö†Ô∏è Jekyll frontmatter might be invalid"
            fi
          fi
          
        else
          echo "‚ùå Article generation failed!"
          exit 1
        fi

    - name: Validate generated content
      if: steps.check_limits.outputs.SHOULD_GENERATE == 'true'
      run: |
        cd _Article
        
        # Check if new posts were created
        if [ $(find ../_posts -name "*.md" -newer last_run.json 2>/dev/null | wc -l) -gt 0 ]; then
          echo "‚úÖ New Jekyll posts detected"
          
          # Validate Jekyll post format
          for post in $(find ../_posts -name "*.md" -newer last_run.json 2>/dev/null); do
            echo "Validating: $(basename "$post")"
            
            # Check frontmatter
            if head -n1 "$post" | grep -q "^---$"; then
              echo "  ‚úÖ Frontmatter present"
            else
              echo "  ‚ö†Ô∏è Missing frontmatter"
            fi
            
            # Check required fields
            if grep -q "^title:" "$post"; then
              echo "  ‚úÖ Title field present"
            fi
            
            if grep -q "^date:" "$post"; then
              echo "  ‚úÖ Date field present"
            fi
            
            # Check content length
            WORD_COUNT=$(wc -w < "$post")
            if [ "$WORD_COUNT" -gt 500 ]; then
              echo "  ‚úÖ Content length: $WORD_COUNT words"
            else
              echo "  ‚ö†Ô∏è Content might be too short: $WORD_COUNT words"
            fi
          done
        else
          echo "‚ö†Ô∏è No new posts detected"
        fi

    - name: Update usage tracking
      if: steps.check_limits.outputs.SHOULD_GENERATE == 'true'
      run: |
        cd _Article
        TODAY=$(date +%Y-%m-%d)
        
        # Update last run tracking
        if [ -f "last_run.json" ]; then
          LAST_RUN=$(cat last_run.json | python3 -c "import sys, json; print(json.load(sys.stdin).get('date', ''))" 2>/dev/null || echo "")
          if [ "$LAST_RUN" = "$TODAY" ]; then
            # Increment daily count
            python3 -c "
import json
try:
    with open('last_run.json', 'r') as f:
        data = json.load(f)
    data['daily_count'] = data.get('daily_count', 0) + 1
    data['last_updated'] = '$(date -u +%Y-%m-%dT%H:%M:%SZ)'
    data['workflow_run'] = '${{ github.run_id }}'
    with open('last_run.json', 'w') as f:
        json.dump(data, f, indent=2)
    print('‚úÖ Daily count updated')
except Exception as e:
    print(f'Error updating daily count: {e}')
"
          else
            # New day, reset count
            cat > last_run.json << EOF
{
  "date": "$TODAY",
  "daily_count": 1,
  "last_updated": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
  "workflow_run": "${{ github.run_id }}"
}
EOF
            echo "‚úÖ New day tracking initialized"
          fi
        else
          # First run
          cat > last_run.json << EOF
{
  "date": "$TODAY",
  "daily_count": 1,
  "last_updated": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
  "workflow_run": "${{ github.run_id }}"
}
EOF
          echo "‚úÖ First run tracking created"
        fi

    - name: Commit and push changes
      if: steps.check_limits.outputs.SHOULD_GENERATE == 'true'
      run: |
        # Configure git
        git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        
        # Check if there are changes to commit
        if git diff --quiet && git diff --cached --quiet; then
          echo "üìù No changes to commit"
          exit 0
        fi
        
        # Stage all changes
        git add .
        
        # Create descriptive commit message
        COMMIT_MSG="Auto-generate: New article created $(date +'%Y-%m-%d %H:%M UTC')"
        
        if [ "${{ github.event.inputs.test_mode }}" = "true" ]; then
          COMMIT_MSG="$COMMIT_MSG [TEST MODE]"
        fi
        
        if [ -n "${{ github.event.inputs.custom_topic }}" ]; then
          COMMIT_MSG="$COMMIT_MSG [Custom: ${{ github.event.inputs.custom_topic }}]"
        fi
        
        git commit -m "$COMMIT_MSG"
        
        # Push changes with retry logic
        for i in {1..3}; do
          if git push origin HEAD:${{ github.ref_name }}; then
            echo "‚úÖ Changes committed and pushed successfully (attempt $i)"
            break
          else
            echo "‚ö†Ô∏è Push failed (attempt $i), retrying in 5 seconds..."
            sleep 5
            if [ $i -eq 3 ]; then
              echo "‚ùå Push failed after 3 attempts"
              echo "Repository: ${{ github.repository }}"
              echo "Actor: ${{ github.actor }}"
              echo "Branch: ${{ github.ref_name }}"
              exit 1
            fi
          fi
        done

    - name: Upload artifacts (debug)
      if: always() && github.event.inputs.debug_mode == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: generation-logs-${{ github.run_id }}
        path: |
          _Article/articles_data.json
          _Article/last_run.json
          _Article/.env
          _Article/*.log
        retention-days: 7

    - name: Create job summary
      if: always()
      run: |
        echo "## üìä Article Generation Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ steps.check_limits.outputs.SHOULD_GENERATE }}" = "true" ]; then
          echo "‚úÖ **Status**: Generation executed" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚è∏Ô∏è **Status**: Skipped (daily limit reached)" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "üìÖ **Date**: $(date +'%Y-%m-%d %H:%M UTC')" >> $GITHUB_STEP_SUMMARY
        echo "üîß **Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ github.event.inputs.test_mode }}" = "true" ]; then
          echo "üß™ **Mode**: Test Mode" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -n "${{ github.event.inputs.custom_topic }}" ]; then
          echo "üìù **Custom Topic**: ${{ github.event.inputs.custom_topic }}" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Recent Posts" >> $GITHUB_STEP_SUMMARY
        
        if ls _posts/*.md 1> /dev/null 2>&1; then
          echo "| Post | Date | Size |" >> $GITHUB_STEP_SUMMARY
          echo "|------|------|------|" >> $GITHUB_STEP_SUMMARY
          for post in $(ls -t _posts/*.md | head -5); do
            FILENAME=$(basename "$post")
            SIZE=$(wc -c < "$post")
            echo "| $FILENAME | $(stat -c %y "$post" | cut -d' ' -f1) | ${SIZE} bytes |" >> $GITHUB_STEP_SUMMARY
          done
        else
          echo "No posts found." >> $GITHUB_STEP_SUMMARY
        fi

env:
  PYTHONUNBUFFERED: 1
  PYTHONIOENCODING: utf-8
